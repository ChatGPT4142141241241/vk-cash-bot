import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request
import time
import random
import json
import os
import requests

API_TOKEN = '8135081615:AAFHaG7cgRaNlBAAEk_ALEP0-wHYzOniYbU'
WEBHOOK_URL = 'https://vk-cash-bot.onrender.com'  # —Ç–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL
ADMIN_ID = 6180147473
YOOMONEY_WALLET = "4100119077541618"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_states = {}
first_spin_done = {}
paid_users = set()

CODES_FILE = "codes.json"

if not os.path.exists(CODES_FILE):
    with open(CODES_FILE, "w") as f:
        json.dump({}, f)

def generate_code(amount, user_id):
    timestamp = int(time.time() * 1000)
    rand = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=4))
    code = f"CODE-{amount}-{timestamp}-{rand}"
    with open(CODES_FILE, "r") as f:
        data = json.load(f)
    data[code] = {"user_id": user_id, "amount": amount, "used": False}
    with open(CODES_FILE, "w") as f:
        json.dump(data, f, indent=4)
    return code

def get_main_markup(user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üéÅ –ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_spin"))
    if user_id in paid_users:
        markup.add(InlineKeyboardButton("üéØ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∫—Ä—É—Ç–∏—Ç—å!", callback_data="paid_spin"))
    else:
        markup.add(InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ ‚Äî –ÆMoney", url=f"https://yoomoney.ru/to/{YOOMONEY_WALLET}"))
        markup.add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="i_paid"))

    markup.add(InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
               InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="leaderboard"))
    markup.add(InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
               InlineKeyboardButton("‚ùì FAQ", callback_data="faq"))
    markup.add(InlineKeyboardButton("üìã –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="policy"))
    if user_id == ADMIN_ID:
        markup.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin"))
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *VK Cash*!\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", 
                     reply_markup=get_main_markup(user_id), parse_mode="Markdown")

@bot.callback_query_handler(func=lambda c: c.data == "free_spin")
def free_spin(call):
    uid = call.from_user.id
    if first_spin_done.get(uid):
        bot.answer_callback_query(call.id, "–£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞.")
        return
    first_spin_done[uid] = True
    run_spin(call, 50)

@bot.callback_query_handler(func=lambda c: c.data == "i_paid")
def confirm_payment(call):
    uid = call.from_user.id
    paid_users.add(uid)
    bot.send_message(uid, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑!", reply_markup=get_main_markup(uid))

@bot.callback_query_handler(func=lambda c: c.data == "paid_spin")
def paid_spin(call):
    uid = call.from_user.id
    if uid not in paid_users:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ 50‚ÇΩ –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'")
        return
    paid_users.remove(uid)
    run_spin(call, random.choice([0, 0, 0, 50, 100, 0, 200, 0, 300]))

def run_spin(call, amount):
    msg = bot.send_message(call.message.chat.id, "üîÑ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\n[ üé∞ üé∞ üé∞ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçã üçí üí£ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçâ üí∞ üí£ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçÄ üí∞ üçí ]")
    if amount > 0:
        code = generate_code(amount, call.from_user.id)
        user_states[call.from_user.id] = {"amount": amount, "code": code}
        msg = f"üéâ *–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {amount}‚ÇΩ!* üéâ\nüé´ –ö–æ–¥: `{code}`\n\nüí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:"
        bot.send_message(call.message.chat.id, msg, parse_mode="Markdown")
    else:
        bot.send_message(call.message.chat.id, "üôÅ –£–≤—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

@bot.callback_query_handler(func=lambda c: c.data in ["shop", "leaderboard", "admin", "rules", "faq", "policy"])
def info_handler(call):
    uid = call.from_user.id
    responses = {
        "shop": "üõç *–ú–∞–≥–∞–∑–∏–Ω:*\n–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –±—É—Å—Ç—ã –∏ –±–æ–Ω—É—Å—ã! –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        "leaderboard": f"üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n1. @user1 ‚Äî 500‚ÇΩ\n2. @user2 ‚Äî 200‚ÇΩ\n3. @user3 ‚Äî 100‚ÇΩ",
        "admin": "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*\n- –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: [–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]\n- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏: [–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]",
        "rules": "üìú *–ü—Ä–∞–≤–∏–ª–∞:*\n1. –û–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —à–∞–Ω—Å\n2. –î–µ–Ω—å–≥–∏ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ\n3. –ù–µ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å üòâ",
        "faq": "‚ùì *FAQ:*\n- *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å VKC?*\n–ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ –∏ –∂–¥–∏ —Å–≤–æ—é —É–¥–∞—á—É!",
        "policy": "üìã *–ü–æ–ª–∏—Ç–∏–∫–∞:*\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã.\nVK Cash ‚Äî —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç."
    }
    bot.send_message(call.message.chat.id, responses[call.data], parse_mode="Markdown")

@bot.message_handler(func=lambda m: True)
def payout_handler(message):
    uid = message.from_user.id
    if uid in user_states:
        state = user_states.pop(uid)
        code = state["code"]
        with open(CODES_FILE, "r") as f:
            codes = json.load(f)
        if code not in codes or codes[code]["used"] or codes[code]["user_id"] != uid:
            bot.send_message(uid, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        codes[code]["used"] = True
        with open(CODES_FILE, "w") as f:
            json.dump(codes, f, indent=4)
        payout = (
            f"üí∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n"
            f"üÜî ID: {uid}\n"
            f"üîê –ö–æ–¥: {code}\n"
            f"üì¶ –°—É–º–º–∞: {state['amount']}‚ÇΩ\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text}"
        )
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é", url="https://yoomoney.ru/main"))
        bot.send_message(ADMIN_ID, payout, reply_markup=markup)
        bot.send_message(uid, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.")

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
        return "OK", 200
    return "VK Cash —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def set_webhook():
    requests.get(f'https://api.telegram.org/bot{API_TOKEN}/setWebhook?url={WEBHOOK_URL}')

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=8080)
