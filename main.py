import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from flask import Flask, request
import time
import random
import json
import os
import threading
import requests

API_TOKEN = '8135081615:AAFHaG7cgRaNlBAAEk_ALEP0-wHYzOniYbU'
ADMIN_ID = 6180147473

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

user_states = {}
payment_pending = set()
payment_review = {}
first_spin_done = {}

CODES_FILE = "codes.json"

if not os.path.exists(CODES_FILE):
    with open(CODES_FILE, "w") as f:
        json.dump({}, f)

def generate_code(amount, user_id):
    timestamp = int(time.time() * 1000)
    random_part = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=4))
    code = f"CODE-{amount}-{timestamp}-{random_part}"
    with open(CODES_FILE, "r") as f:
        codes = json.load(f)
    codes[code] = {"user_id": user_id, "amount": amount, "used": False}
    with open(CODES_FILE, "w") as f:
        json.dump(codes, f, indent=4)
    return code

def get_main_markup(user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üéÅ –ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_spin"))
    markup.add(InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ", callback_data="pay"))
    markup.add(InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="leaderboard"))
    markup.add(InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
               InlineKeyboardButton("‚ùì FAQ", callback_data="faq"))
    markup.add(InlineKeyboardButton("üìã –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="policy"))
    if user_id == ADMIN_ID:
        markup.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin"))
    return markup

@bot.message_handler(commands=['start'])
def send_start(message):
    bot.send_message(message.chat.id, "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VK Cash!", reply_markup=get_main_markup(message.from_user.id))

@bot.message_handler(commands=['rules'])
def command_rules(message):
    bot.send_message(message.chat.id, "üìú –ü—Ä–∞–≤–∏–ª–∞:\n- –ü–µ—Ä–≤–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞\n- –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ‚Äî –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã 50‚ÇΩ\n- –í—ã–∏–≥—Ä—ã—à —Å–ª—É—á–∞–π–Ω—ã–π, —à–∞–Ω—Å—ã –Ω–∏–∑–∫–∏–µ\n- –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

@bot.message_handler(commands=['leaderboard'])
def command_leaderboard(message):
    usernames = ["@lucky_fox", "@spinmaster22", "@richbee", "@coincrazy", "@vegasowl"]
    text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for i, user in enumerate(usernames, 1):
        text += f"{i}. {user} ‚Äî {random.choice([50,100,150,200])}‚ÇΩ\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['faq'])
def command_faq(message):
    bot.send_message(message.chat.id, "‚ùì FAQ:\n- –ö–∞–∫ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ '–ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'\n- –ö–∞–∫ —Å–Ω–æ–≤–∞ –∏–≥—Ä–∞—Ç—å? –û–ø–ª–∞—Ç–∏ 50‚ÇΩ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω\n- –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞? –í —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

@bot.message_handler(commands=['policy'])
def command_policy(message):
    bot.send_message(message.chat.id, "üìã –ü–æ–ª–∏—Ç–∏–∫–∞:\n- –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π\n- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª—É—á–∞–π–Ω—ã\n- –í–æ–∑–≤—Ä–∞—Ç–æ–≤ –Ω–µ—Ç\n- –£—á–∞—Å—Ç–∏–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ")

@bot.message_handler(commands=['admin'])
def command_admin(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    with open(CODES_FILE) as f:
        codes = json.load(f)
    text = "üóÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:\n"
    for code, data in codes.items():
        status = "‚úÖ" if data['used'] else "üïì"
        text += f"{status} {code} ‚Äî {data['amount']}‚ÇΩ ‚Äî ID: {data['user_id']}\n"
    used = sum(1 for c in codes.values() if c['used'])
    pending = sum(1 for c in codes.values() if not c['used'])
    total = len(codes)
    stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {total}\n–û–∂–∏–¥–∞—é—Ç: {pending}\n–í—ã–ø–ª–∞—á–µ–Ω–æ: {used}"
    bot.send_message(message.chat.id, stats + "\n\n" + text[:4000])

@bot.callback_query_handler(func=lambda call: call.data in ["rules", "leaderboard", "faq", "policy", "admin"])
def handle_common_callbacks(call):
    commands = {
        "rules": command_rules,
        "leaderboard": command_leaderboard,
        "faq": command_faq,
        "policy": command_policy,
        "admin": command_admin
    }
    commands[call.data](call.message)

@bot.callback_query_handler(func=lambda call: call.data == "free_spin")
def handle_free_spin(call):
    uid = call.from_user.id
    if first_spin_done.get(uid):
        bot.answer_callback_query(call.id, "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
        return
    first_spin_done[uid] = True
    msg = bot.send_message(uid, "üîÑ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\n[ üé∞ üé∞ üé∞ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçí üí£ üçã ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçÄ üí∞ üçâ ]")
    time.sleep(1)
    amount = random.choice([0, 10, 25, 50, 100, 200, 500])
    code = generate_code(amount, uid)
    user_states[uid] = {"amount": amount, "code": code}
    bot.send_message(uid, f"üéâ –ü–û–ë–ï–î–ê {amount}‚ÇΩ!\n–ö–æ–¥: `{code}`\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "pay")
def handle_pay(call):
    uid = call.from_user.id
    payment_pending.add(uid)
    bot.send_message(uid, "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏ 50‚ÇΩ –Ω–∞ –ÆMoney: `4100119077541618`\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", parse_mode="Markdown",
                     reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")))

@bot.callback_query_handler(func=lambda call: call.data == "paid")
def handle_paid(call):
    uid = call.from_user.id
    if uid in payment_pending:
        bot.send_message(uid, "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.")
    else:
        bot.send_message(uid, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\".")

@bot.message_handler(content_types=['photo'])
def handle_payment_proof(message):
    uid = message.from_user.id
    if uid in payment_pending:
        payment_review[uid] = message.message_id
        bot.send_message(uid, "üì© –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{uid}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{uid}")
        )
        bot.forward_message(ADMIN_ID, uid, message.message_id)
        code_info = user_states.get(uid, {})
        extra = f"–ö–æ–¥: {code_info.get('code')}\n–°—É–º–º–∞: {code_info.get('amount')}‚ÇΩ" if code_info else "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
        bot.send_message(ADMIN_ID, f"–ü–ª–∞—Ç—ë–∂ –æ—Ç ID: {uid}\n{extra}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_payment(call):
    if call.from_user.id != ADMIN_ID:
        return
    uid = int(call.data.split("_")[1])
    if uid in payment_review:
        payment_pending.discard(uid)
        payment_review.pop(uid)
        first_spin_done[uid] = False
        with open(CODES_FILE) as f:
            codes = json.load(f)
        for code, data in codes.items():
            if data["user_id"] == uid and not data["used"]:
                data["used"] = True
                break
        with open(CODES_FILE, "w") as f:
            json.dump(codes, f, indent=4)
        bot.send_message(uid, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ.")
        bot.edit_message_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", chat_id=call.message.chat.id, message_id=call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_payment(call):
    if call.from_user.id != ADMIN_ID:
        return
    uid = int(call.data.split("_")[1])
    if uid in payment_review:
        payment_pending.discard(uid)
        payment_review.pop(uid)
        bot.send_message(uid, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
        bot.edit_message_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.", chat_id=call.message.chat.id, message_id=call.message.message_id)

@bot.message_handler(func=lambda m: True)
def handle_requisites(message):
    uid = message.from_user.id
    if uid in user_states:
        state = user_states.pop(uid)
        code = state['code']
        with open(CODES_FILE) as f:
            codes = json.load(f)
        if code in codes and not codes[code]['used']:
            bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username or uid}:\n–ö–æ–¥: {code}\n–°—É–º–º–∞: {state['amount']}‚ÇΩ\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text}")
            bot.send_message(uid, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π –≤—ã–ø–ª–∞—Ç—É.")

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bot is running!', 200

def check_webhook():
    try:
        response = requests.get(f"https://api.telegram.org/bot{API_TOKEN}/getWebhookInfo")
        if response.status_code == 200:
            result = response.json()
            current_url = result['result'].get('url', '')
            if current_url != "https://vk-cash-bot.onrender.com":
                print("üîÑ Webhook –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
                requests.get(f"https://api.telegram.org/bot{API_TOKEN}/setWebhook?url=https://vk-cash-bot.onrender.com")
            else:
                print("‚úÖ Webhook –∞–∫—Ç–∏–≤–µ–Ω.")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Webhook: {response.status_code}")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Webhook: {e}")
    threading.Timer(10, check_webhook).start()

if __name__ == '__main__':
    bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("pay", "–û–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ"),
        BotCommand("rules", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞"),
        BotCommand("leaderboard", "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
        BotCommand("faq", "FAQ –ø–æ –∏–≥—Ä–µ"),
        BotCommand("policy", "–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand("admin", "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    ])
    check_webhook()
    app.run(host='0.0.0.0', port=8080)
